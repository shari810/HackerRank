#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);


/*
 * Complete the 'flippingBits' function below.
 *
 * The function is expected to return a LONG_INTEGER.
 * The function accepts LONG_INTEGER n as parameter.
 */

long flippingBits(long n) {
    //cout << n << endl;
    
    int binArray[32] ={0};
    
    int i = 31;
    while(n>0){
        binArray[i] = n%2;
        n = n/2;
        i--;
    }
    //cout << "Original Bits: " << endl;
    //for (auto x: binArray){
    //    cout << x;
    //}
    //cout << endl;
    
    for(int j = 0; j<32;j++){
        if (binArray[j] == 0){
            binArray[j] = 1;
        }
        else{
            binArray[j] = 0;
        }
    }
    
    //cout << "Flipped Bits: " << endl;
    //for (auto x: binArray){
    //    cout << x;
    //}
    //cout << endl;
    
    unsigned int result = 0;
    for(int z = 0;z<=31;z++){
        //cout << binArray[31-z] << endl;
        if(binArray[31-z] == 0){
            result = result;
        }
        else{
            result = result + pow(2,z);
            //cout << "found a 1" << endl;
        }
        //cout << "z is: " << z << endl;
        //cout << "result:  " << result << endl;
    }
    //cout << "result is: "<<result << endl;
    
    
    return result;  
    }




int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string q_temp;
    getline(cin, q_temp);

    int q = stoi(ltrim(rtrim(q_temp)));

    for (int q_itr = 0; q_itr < q; q_itr++) {
        string n_temp;
        getline(cin, n_temp);

        long n = stol(ltrim(rtrim(n_temp)));

        long result = flippingBits(n);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}
